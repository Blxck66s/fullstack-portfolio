generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(cuid())
  email       String         @unique
  name        String
  avatarUrl   String?
  password    String?
  role        String         @default("user")
  isOnline    Boolean        @default(false)
  lastSeen    DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  providers   OAuthProvider[] 
  refreshTokens RefreshToken[]
  chatMembers  ChatMember[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthProvider {
  id          String   @id @default(cuid())
  provider    String   
  providerId  String  
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerId]) 
}

model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     ChatMember[]
  messages    ChatMessage[]
}

enum ChatMemberStatus {
  ACTIVE
  PENDING
  BLOCKED
}

model ChatMember {
  id          String   @id @default(cuid())
  userId      String
  chatRoomId  String
  status      ChatMemberStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  messages    ChatMessage[]

  @@unique([userId, chatRoomId])
}

model ChatMessage {
  id          String   @id @default(cuid())
  message     String
  isRead      Boolean  @default(false)
  chatMemberId String
  chatRoomId  String
  
  deletedAt   DateTime?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  chatMember  ChatMember @relation(fields: [chatMemberId], references: [id], onDelete: Cascade)
  chatRoom    ChatRoom   @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
}
